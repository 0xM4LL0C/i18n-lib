{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"i18n-lib","text":""},{"location":"#install","title":"install","text":""},{"location":"#from-pypi","title":"from PyPI","text":"<pre><code>pip install i18n-lib\n</code></pre>"},{"location":"#from-source","title":"from source","text":"<pre><code>pip install git+https://github.com/HamletSargsyan/i18n-lib.git\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"api/","title":"API reference","text":""},{"location":"api/#i18n","title":"i18n","text":""},{"location":"api/#i18n.FallbackDict","title":"FallbackDict","text":"<p>               Bases: <code>dict[str, Any]</code></p> <p>A dictionary that returns a default error message for missing keys.</p>"},{"location":"api/#i18n.FallbackDict.__missing__","title":"__missing__","text":"<pre><code>__missing__(key: str) -&gt; str\n</code></pre> <p>Return a default error message for missing keys.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The missing key.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The error message.</p>"},{"location":"api/#i18n.I18N","title":"I18N","text":"<p>Internationalization class for managing translations.</p>"},{"location":"api/#i18n.I18N.available_locales","title":"available_locales  <code>property</code>","text":"<pre><code>available_locales: set[str]\n</code></pre> <p>Get the set of available locales.</p> <p>Returns:</p> Type Description <code>set[str]</code> <p>set[str]: The set of available locales.</p>"},{"location":"api/#i18n.I18N.__init__","title":"__init__","text":"<pre><code>__init__(\n    default_locale: str, load_path: str = \"locales/\"\n) -&gt; None\n</code></pre> <p>Initialize the I18N class.</p> <p>Parameters:</p> Name Type Description Default <code>default_locale</code> <code>str</code> <p>The default locale to use.</p> required <code>load_path</code> <code>str</code> <p>The path to the directory containing locale files. Defaults to \"locales/\".</p> <code>'locales/'</code>"},{"location":"api/#i18n.I18N.load","title":"load","text":"<pre><code>load() -&gt; None\n</code></pre> <p>Load translations from locale files.</p>"},{"location":"api/#i18n.I18N._get_nested_translation","title":"_get_nested_translation","text":"<pre><code>_get_nested_translation(\n    data: dict[str, Any], key: str\n) -&gt; Optional[dict[str, Any]]\n</code></pre> <p>Retrieve a nested translation from the data dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The dictionary containing translations.</p> required <code>key</code> <code>str</code> <p>The key for the desired translation.</p> required <p>Returns:</p> Type Description <code>Optional[dict[str, Any]]</code> <p>Optional[dict[str, Any]]: The nested translation or None if not found.</p>"},{"location":"api/#i18n.I18N.register_function","title":"register_function","text":"<pre><code>register_function(\n    name: str, func: Callable[..., Any]\n) -&gt; None\n</code></pre> <p>Register a custom function for use in translations.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the function.</p> required <code>func</code> <code>Callable</code> <p>The function to register.</p> required"},{"location":"api/#i18n.I18N.register_constant","title":"register_constant","text":"<pre><code>register_constant(name: str, value: Any) -&gt; None\n</code></pre> <p>Register a constant for use in translations.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the constant.</p> required <code>value</code> <code>Any</code> <p>The value of the constant.</p> required"},{"location":"api/#i18n.I18N._eval_function","title":"_eval_function","text":"<pre><code>_eval_function(func_call: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Evaluate a function call within a translation string.</p> <p>Parameters:</p> Name Type Description Default <code>func_call</code> <code>str</code> <p>The function call string.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The result of the function call or an error message if the function is not defined.</p>"},{"location":"api/#i18n.I18N._eval_constant","title":"_eval_constant","text":"<pre><code>_eval_constant(const_name: str) -&gt; str\n</code></pre> <p>Evaluate a constant within a translation string.</p> <p>Parameters:</p> Name Type Description Default <code>const_name</code> <code>str</code> <p>The name of the constant.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The value of the constant or an error message if the constant is not defined.</p>"},{"location":"api/#i18n.I18N._eval_object_attr","title":"_eval_object_attr","text":"<pre><code>_eval_object_attr(obj: Any, attr_path: str) -&gt; str\n</code></pre> <p>Evaluate an object's attribute within a translation string.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object containing the attribute.</p> required <code>attr_path</code> <code>str</code> <p>The dot-separated path to the attribute.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The value of the attribute or an error message if the attribute is not found.</p>"},{"location":"api/#i18n.I18N.t","title":"t","text":"<pre><code>t(locale: str, key: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Translate a key for a given locale.</p> <p>Parameters:</p> Name Type Description Default <code>locale</code> <code>str</code> <p>The locale to use for translation.</p> required <code>key</code> <code>str</code> <p>The key to translate.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for formatting the translation.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The translated string or the key if no translation is found.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#010---2025-03-18","title":"[0.1.0] - 2025-03-18","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>initial release</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>This documentation provides a detailed explanation of how to use the I18N class for internationalization (i18n) in your Python projects. The I18N class allows you to manage translations, constants, and functions, and dynamically inject them into your translated strings.</p>"},{"location":"usage/#initializing-the-i18n-instance","title":"Initializing the I18N Instance","text":"<p>Create an instance of the I18N class by specifying the default locale and the path where your translation files are located:</p> <pre><code>from i18n import I18N\n\ni18n = I18N(default_locale=\"en\", load_path=\"locales/\")\n</code></pre>"},{"location":"usage/#registering-constants","title":"Registering Constants","text":"<p>You can register constants that can be used in your translations. Constants are static values that do not change during runtime.</p> <pre><code>i18n.register_const(\"CONST_VAR\", \"some value\")\n</code></pre>"},{"location":"usage/#registering-functions","title":"Registering Functions","text":"<p>You can also register functions that can be called dynamically within your translations. Functions can take arguments and return values that are injected into the translated strings.</p>"},{"location":"usage/#translating-strings","title":"Translating Strings","text":"<p>To translate a string, use the t method of the I18N instance. The t method takes the locale, the translation key, and any additional keyword arguments that will be used in the translation.</p> <pre><code>print(i18n.t(\"en\", \"greet\", name=\"Jake\"))  # Output: \"hello Jake\"\nprint(i18n.t(\"en\", \"with-const\"))  # Output: \"with const: some value\"\nprint(i18n.t(\"en\", \"with-func\"))  # Output: \"with func call: Alex\"\nprint(i18n.t(\"en\", \"func-with-args\"))  # Output: \"func call with args: 2\"\nprint(i18n.t(\"en\", \"with-obj\", object=SomeObject))  # Output: \"with object attribute: some value\"\n</code></pre>"},{"location":"usage/#translation-file-structure","title":"Translation File Structure","text":"<pre><code>greet: hello {name}\nwith-const: \"with const: {const:CONST_VAR}\"\nwith-func: \"with func call: {func:get_name()}\"\nfunc-with-args: \"func call with args: {func:add(1, 1)}\"\nwith-obj: \"with object attribute: {obj:object.some_attribute}\"\n</code></pre>"},{"location":"usage/#fallback-to-default-locale","title":"Fallback to Default Locale","text":"<p>If a translation key is not found in the specified locale, the I18N class will fall back to the default locale:</p> <pre><code>print(i18n.t(\"fr\", \"greet\", name=\"Jake\"))  # Output: \"hello Jake\" (fallback to \"en\" locale)\n</code></pre>"},{"location":"usage/#handling-missing-keys","title":"Handling Missing Keys","text":"<p>If a translation key is missing in both the specified locale and the default locale, the t method will return the key itself:</p> <pre><code>print(i18n.t(\"en\", \"missing_key\"))  # Output: \"missing_key\"\n</code></pre>"}]}